
Tram8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  000006f8  0000078c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800172  00800172  0000089e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000910  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000122e  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b5  00000000  00000000  00001c76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e50  00000000  00000000  0000252b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000337c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000665  00000000  00000000  0000353c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000763  00000000  00000000  00003ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004304  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	18 c1       	rjmp	.+560    	; 0x248 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ef       	ldi	r30, 0xF8	; 248
  3a:	f6 e0       	ldi	r31, 0x06	; 6
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 37       	cpi	r26, 0x72	; 114
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a2 e7       	ldi	r26, 0x72	; 114
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	af 37       	cpi	r26, 0x7F	; 127
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	38 d2       	rcall	.+1136   	; 0x4ca <main>
  5a:	4c c3       	rjmp	.+1688   	; 0x6f4 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <TWI_READ_BULK>:
  5e:	f9 01       	movw	r30, r18
  60:	11 b8       	out	0x01, r1	; 1
  62:	9c e0       	ldi	r25, 0x0C	; 12
  64:	90 b9       	out	0x00, r25	; 0
  66:	94 e9       	ldi	r25, 0x94	; 148
  68:	96 bf       	out	0x36, r25	; 54
  6a:	94 ea       	ldi	r25, 0xA4	; 164
  6c:	96 bf       	out	0x36, r25	; 54
  6e:	06 b6       	in	r0, 0x36	; 54
  70:	07 fe       	sbrs	r0, 7
  72:	fd cf       	rjmp	.-6      	; 0x6e <TWI_READ_BULK+0x10>
  74:	91 b1       	in	r25, 0x01	; 1
  76:	98 7f       	andi	r25, 0xF8	; 248
  78:	98 30       	cpi	r25, 0x08	; 8
  7a:	21 f0       	breq	.+8      	; 0x84 <TWI_READ_BULK+0x26>
  7c:	84 e9       	ldi	r24, 0x94	; 148
  7e:	86 bf       	out	0x36, r24	; 54
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	08 95       	ret
  84:	83 b9       	out	0x03, r24	; 3
  86:	94 e8       	ldi	r25, 0x84	; 132
  88:	96 bf       	out	0x36, r25	; 54
  8a:	06 b6       	in	r0, 0x36	; 54
  8c:	07 fe       	sbrs	r0, 7
  8e:	fd cf       	rjmp	.-6      	; 0x8a <TWI_READ_BULK+0x2c>
  90:	91 b1       	in	r25, 0x01	; 1
  92:	98 7f       	andi	r25, 0xF8	; 248
  94:	98 31       	cpi	r25, 0x18	; 24
  96:	21 f0       	breq	.+8      	; 0xa0 <TWI_READ_BULK+0x42>
  98:	84 e9       	ldi	r24, 0x94	; 148
  9a:	86 bf       	out	0x36, r24	; 54
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	08 95       	ret
  a0:	63 b9       	out	0x03, r22	; 3
  a2:	94 e8       	ldi	r25, 0x84	; 132
  a4:	96 bf       	out	0x36, r25	; 54
  a6:	06 b6       	in	r0, 0x36	; 54
  a8:	07 fe       	sbrs	r0, 7
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <TWI_READ_BULK+0x48>
  ac:	91 b1       	in	r25, 0x01	; 1
  ae:	98 7f       	andi	r25, 0xF8	; 248
  b0:	98 32       	cpi	r25, 0x28	; 40
  b2:	21 f0       	breq	.+8      	; 0xbc <TWI_READ_BULK+0x5e>
  b4:	84 e9       	ldi	r24, 0x94	; 148
  b6:	86 bf       	out	0x36, r24	; 54
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	08 95       	ret
  bc:	94 ee       	ldi	r25, 0xE4	; 228
  be:	96 bf       	out	0x36, r25	; 54
  c0:	06 b6       	in	r0, 0x36	; 54
  c2:	07 fe       	sbrs	r0, 7
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <TWI_READ_BULK+0x62>
  c6:	91 b1       	in	r25, 0x01	; 1
  c8:	98 7f       	andi	r25, 0xF8	; 248
  ca:	90 31       	cpi	r25, 0x10	; 16
  cc:	21 f0       	breq	.+8      	; 0xd6 <TWI_READ_BULK+0x78>
  ce:	84 e9       	ldi	r24, 0x94	; 148
  d0:	86 bf       	out	0x36, r24	; 54
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	08 95       	ret
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	83 b9       	out	0x03, r24	; 3
  da:	84 e8       	ldi	r24, 0x84	; 132
  dc:	86 bf       	out	0x36, r24	; 54
  de:	06 b6       	in	r0, 0x36	; 54
  e0:	07 fe       	sbrs	r0, 7
  e2:	fd cf       	rjmp	.-6      	; 0xde <TWI_READ_BULK+0x80>
  e4:	81 b1       	in	r24, 0x01	; 1
  e6:	88 7f       	andi	r24, 0xF8	; 248
  e8:	80 34       	cpi	r24, 0x40	; 64
  ea:	41 f4       	brne	.+16     	; 0xfc <TWI_READ_BULK+0x9e>
  ec:	64 2f       	mov	r22, r20
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	61 50       	subi	r22, 0x01	; 1
  f2:	71 09       	sbc	r23, r1
  f4:	16 16       	cp	r1, r22
  f6:	17 06       	cpc	r1, r23
  f8:	2c f0       	brlt	.+10     	; 0x104 <TWI_READ_BULK+0xa6>
  fa:	23 c0       	rjmp	.+70     	; 0x142 <TWI_READ_BULK+0xe4>
  fc:	84 e9       	ldi	r24, 0x94	; 148
  fe:	86 bf       	out	0x36, r24	; 54
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	08 95       	ret
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	54 ec       	ldi	r21, 0xC4	; 196
 10c:	56 bf       	out	0x36, r21	; 54
 10e:	06 b6       	in	r0, 0x36	; 54
 110:	07 fe       	sbrs	r0, 7
 112:	fd cf       	rjmp	.-6      	; 0x10e <TWI_READ_BULK+0xb0>
 114:	31 b1       	in	r19, 0x01	; 1
 116:	38 7f       	andi	r19, 0xF8	; 248
 118:	30 35       	cpi	r19, 0x50	; 80
 11a:	21 f0       	breq	.+8      	; 0x124 <TWI_READ_BULK+0xc6>
 11c:	84 e9       	ldi	r24, 0x94	; 148
 11e:	86 bf       	out	0x36, r24	; 54
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	08 95       	ret
 124:	23 b1       	in	r18, 0x03	; 3
 126:	df 01       	movw	r26, r30
 128:	a8 0f       	add	r26, r24
 12a:	b9 1f       	adc	r27, r25
 12c:	2c 93       	st	X, r18
 12e:	84 e1       	ldi	r24, 0x14	; 20
 130:	00 00       	nop
 132:	81 50       	subi	r24, 0x01	; 1
 134:	e9 f7       	brne	.-6      	; 0x130 <TWI_READ_BULK+0xd2>
 136:	4f 5f       	subi	r20, 0xFF	; 255
 138:	84 2f       	mov	r24, r20
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	86 17       	cp	r24, r22
 13e:	97 07       	cpc	r25, r23
 140:	2c f3       	brlt	.-54     	; 0x10c <TWI_READ_BULK+0xae>
 142:	84 e8       	ldi	r24, 0x84	; 132
 144:	86 bf       	out	0x36, r24	; 54
 146:	06 b6       	in	r0, 0x36	; 54
 148:	07 fe       	sbrs	r0, 7
 14a:	fd cf       	rjmp	.-6      	; 0x146 <TWI_READ_BULK+0xe8>
 14c:	83 b1       	in	r24, 0x03	; 3
 14e:	e6 0f       	add	r30, r22
 150:	f7 1f       	adc	r31, r23
 152:	80 83       	st	Z, r24
 154:	84 e9       	ldi	r24, 0x94	; 148
 156:	86 bf       	out	0x36, r24	; 54
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	08 95       	ret

0000015c <TWI_WRITE_BULK>:
 15c:	11 b8       	out	0x01, r1	; 1
 15e:	9c e0       	ldi	r25, 0x0C	; 12
 160:	90 b9       	out	0x00, r25	; 0
 162:	94 e9       	ldi	r25, 0x94	; 148
 164:	96 bf       	out	0x36, r25	; 54
 166:	94 ea       	ldi	r25, 0xA4	; 164
 168:	96 bf       	out	0x36, r25	; 54
 16a:	06 b6       	in	r0, 0x36	; 54
 16c:	07 fe       	sbrs	r0, 7
 16e:	fd cf       	rjmp	.-6      	; 0x16a <TWI_WRITE_BULK+0xe>
 170:	91 b1       	in	r25, 0x01	; 1
 172:	98 7f       	andi	r25, 0xF8	; 248
 174:	98 30       	cpi	r25, 0x08	; 8
 176:	21 f0       	breq	.+8      	; 0x180 <TWI_WRITE_BULK+0x24>
 178:	84 e9       	ldi	r24, 0x94	; 148
 17a:	86 bf       	out	0x36, r24	; 54
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	08 95       	ret
 180:	83 b9       	out	0x03, r24	; 3
 182:	84 e8       	ldi	r24, 0x84	; 132
 184:	86 bf       	out	0x36, r24	; 54
 186:	06 b6       	in	r0, 0x36	; 54
 188:	07 fe       	sbrs	r0, 7
 18a:	fd cf       	rjmp	.-6      	; 0x186 <TWI_WRITE_BULK+0x2a>
 18c:	81 b1       	in	r24, 0x01	; 1
 18e:	88 7f       	andi	r24, 0xF8	; 248
 190:	88 31       	cpi	r24, 0x18	; 24
 192:	21 f0       	breq	.+8      	; 0x19c <TWI_WRITE_BULK+0x40>
 194:	84 e9       	ldi	r24, 0x94	; 148
 196:	86 bf       	out	0x36, r24	; 54
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	08 95       	ret
 19c:	63 b9       	out	0x03, r22	; 3
 19e:	84 e8       	ldi	r24, 0x84	; 132
 1a0:	86 bf       	out	0x36, r24	; 54
 1a2:	06 b6       	in	r0, 0x36	; 54
 1a4:	07 fe       	sbrs	r0, 7
 1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <TWI_WRITE_BULK+0x46>
 1a8:	81 b1       	in	r24, 0x01	; 1
 1aa:	88 7f       	andi	r24, 0xF8	; 248
 1ac:	88 32       	cpi	r24, 0x28	; 40
 1ae:	19 f4       	brne	.+6      	; 0x1b6 <TWI_WRITE_BULK+0x5a>
 1b0:	41 11       	cpse	r20, r1
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <TWI_WRITE_BULK+0x62>
 1b4:	1d c0       	rjmp	.+58     	; 0x1f0 <TWI_WRITE_BULK+0x94>
 1b6:	84 e9       	ldi	r24, 0x94	; 148
 1b8:	86 bf       	out	0x36, r24	; 54
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	08 95       	ret
 1be:	f9 01       	movw	r30, r18
 1c0:	41 50       	subi	r20, 0x01	; 1
 1c2:	84 2f       	mov	r24, r20
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	28 0f       	add	r18, r24
 1ca:	39 1f       	adc	r19, r25
 1cc:	94 e8       	ldi	r25, 0x84	; 132
 1ce:	81 91       	ld	r24, Z+
 1d0:	83 b9       	out	0x03, r24	; 3
 1d2:	96 bf       	out	0x36, r25	; 54
 1d4:	06 b6       	in	r0, 0x36	; 54
 1d6:	07 fe       	sbrs	r0, 7
 1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <TWI_WRITE_BULK+0x78>
 1da:	81 b1       	in	r24, 0x01	; 1
 1dc:	88 7f       	andi	r24, 0xF8	; 248
 1de:	88 32       	cpi	r24, 0x28	; 40
 1e0:	21 f0       	breq	.+8      	; 0x1ea <TWI_WRITE_BULK+0x8e>
 1e2:	84 e9       	ldi	r24, 0x94	; 148
 1e4:	86 bf       	out	0x36, r24	; 54
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	08 95       	ret
 1ea:	e2 17       	cp	r30, r18
 1ec:	f3 07       	cpc	r31, r19
 1ee:	79 f7       	brne	.-34     	; 0x1ce <TWI_WRITE_BULK+0x72>
 1f0:	84 e9       	ldi	r24, 0x94	; 148
 1f2:	86 bf       	out	0x36, r24	; 54
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	08 95       	ret

000001f8 <set_default>:
	//return;
//}

void set_default(void){
	//MIDI
	midi_channel = 9;
 1f8:	89 e0       	ldi	r24, 0x09	; 9
 1fa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <midi_channel>
	memcpy(&midi_note_map,&midi_note_map_default,8);
 1fe:	88 e0       	ldi	r24, 0x08	; 8
 200:	e2 e6       	ldi	r30, 0x62	; 98
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	aa e6       	ldi	r26, 0x6A	; 106
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	01 90       	ld	r0, Z+
 20a:	0d 92       	st	X+, r0
 20c:	8a 95       	dec	r24
 20e:	e1 f7       	brne	.-8      	; 0x208 <set_default+0x10>
	//presets.reset_invert = DISABLE;
	//presets.velocity_mute = DISABLE;
	//presets.midi_conv_en = ENABLE;
	
	//SAVE TO EEPROM
	do {} while (!eeprom_is_ready());
 210:	e1 99       	sbic	0x1c, 1	; 28
 212:	fe cf       	rjmp	.-4      	; 0x210 <set_default+0x18>
	//save Channel
	//midi_channel = eeprom_read_byte(EEPROM_CHANNEL_ADDR);
	eeprom_write_byte(EEPROM_CHANNEL_ADDR,midi_channel);
 214:	69 e0       	ldi	r22, 0x09	; 9
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	5f d2       	rcall	.+1214   	; 0x6da <eeprom_write_byte>
	
	do {} while (!eeprom_is_ready());
 21c:	e1 99       	sbic	0x1c, 1	; 28
 21e:	fe cf       	rjmp	.-4      	; 0x21c <set_default+0x24>
	//load map
	//	eeprom_read_block(&midi_note_map,EEPROM_MAP_ADDR,8);
	eeprom_write_block(&midi_note_map,EEPROM_MAP_ADDR,8);
 220:	48 e0       	ldi	r20, 0x08	; 8
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	71 e0       	ldi	r23, 0x01	; 1
 228:	8a e6       	ldi	r24, 0x6A	; 106
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	4d d2       	rcall	.+1178   	; 0x6c8 <eeprom_write_block>
 22e:	08 95       	ret

00000230 <set_velocity>:

void set_velocity(uint8_t ch, uint8_t velo){
	
	velo = velo & 0x7F; 
	
	max5825_set_load_channel((ch&0x0F),velocity_lookup[velo]);
 230:	6f 77       	andi	r22, 0x7F	; 127
 232:	e6 2f       	mov	r30, r22
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	ee 0f       	add	r30, r30
 238:	ff 1f       	adc	r31, r31
 23a:	ee 58       	subi	r30, 0x8E	; 142
 23c:	ff 4f       	sbci	r31, 0xFF	; 255
 23e:	60 81       	ld	r22, Z
 240:	71 81       	ldd	r23, Z+1	; 0x01
 242:	8f 70       	andi	r24, 0x0F	; 15
 244:	13 d2       	rcall	.+1062   	; 0x66c <max5825_set_load_channel>
 246:	08 95       	ret

00000248 <__vector_11>:
}


/* MIDI RECEIVER */
ISR(USART_RXC_vect)
{
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	af 92       	push	r10
 254:	bf 92       	push	r11
 256:	df 92       	push	r13
 258:	ef 92       	push	r14
 25a:	ff 92       	push	r15
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	2f 93       	push	r18
 262:	3f 93       	push	r19
 264:	4f 93       	push	r20
 266:	5f 93       	push	r21
 268:	6f 93       	push	r22
 26a:	7f 93       	push	r23
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
 270:	af 93       	push	r26
 272:	bf 93       	push	r27
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	ef 93       	push	r30
 27a:	ff 93       	push	r31
	uint8_t uart_data;
	uart_data = UDR;
 27c:	8c b1       	in	r24, 0x0c	; 12
	
	
	//set_LED(ENABLE);
	
	if ((uart_data>>MIDI_STATUS_bit)&1)
 27e:	88 23       	and	r24, r24
 280:	74 f4       	brge	.+28     	; 0x29e <__vector_11+0x56>
		//if (uart_data == MIDI_STOP)
		//midi_clock_run = 0;
		//if (uart_data == MIDI_CONT)
		//midi_clock_run = 1;
		//
		if (((uart_data&0xE0) == MIDI_NOTE_OFF)){ //receives note ons too: &E0 !!
 282:	98 2f       	mov	r25, r24
 284:	90 7e       	andi	r25, 0xE0	; 224
 286:	90 38       	cpi	r25, 0x80	; 128
 288:	09 f0       	breq	.+2      	; 0x28c <__vector_11+0x44>
 28a:	d2 c0       	rjmp	.+420    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
			midi_buff[0] = uart_data;
 28c:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <midi_buff>
			midi_buff_point = 1;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <midi_buff_point>
			midi_buff_allowed = 2;
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <midi_buff_allowed>
 29c:	c9 c0       	rjmp	.+402    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		//
		
		
		//}
		
		} else if (midi_buff_allowed > 0) {
 29e:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <midi_buff_allowed>
 2a2:	99 23       	and	r25, r25
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <__vector_11+0x60>
 2a6:	c4 c0       	rjmp	.+392    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		//receive bytes of instruction if allowed
		midi_buff[midi_buff_point] = uart_data;
 2a8:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <midi_buff_point>
 2ac:	e2 2f       	mov	r30, r18
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	e4 58       	subi	r30, 0x84	; 132
 2b2:	fe 4f       	sbci	r31, 0xFE	; 254
 2b4:	80 83       	st	Z, r24
		midi_buff_point++;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	82 0f       	add	r24, r18
 2ba:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <midi_buff_point>
		midi_buff_allowed--;
 2be:	91 50       	subi	r25, 0x01	; 1
 2c0:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <midi_buff_allowed>
		
		/************************************************************************/
		/*                    MIDI Buffer translate                             */
		/************************************************************************/
		
		if ((midi_buff_point == 3)) //3byte min for whole note message rx
 2c4:	83 30       	cpi	r24, 0x03	; 3
 2c6:	09 f0       	breq	.+2      	; 0x2ca <__vector_11+0x82>
 2c8:	b3 c0       	rjmp	.+358    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		{
			midi_buff_point = 0;
 2ca:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <midi_buff_point>
			//set_LED(DISABLE);
			//	asm volatile ("nop");
			
			
			//LEARN MODE ONLY:
			if ((midi_learn_mode) && (midi_learn_current<8) && ((midi_buff[0]&0xF0)==MIDI_NOTE_ON)){//learn map from pressed button and midi RX		
 2ce:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <midi_learn_mode>
 2d2:	88 23       	and	r24, r24
 2d4:	09 f4       	brne	.+2      	; 0x2d8 <__vector_11+0x90>
 2d6:	8e c0       	rjmp	.+284    	; 0x3f4 <__vector_11+0x1ac>
 2d8:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <midi_learn_current>
 2dc:	e8 30       	cpi	r30, 0x08	; 8
 2de:	08 f0       	brcs	.+2      	; 0x2e2 <__vector_11+0x9a>
 2e0:	a7 c0       	rjmp	.+334    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 2e2:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <midi_buff>
 2e6:	98 2f       	mov	r25, r24
 2e8:	90 7f       	andi	r25, 0xF0	; 240
 2ea:	90 39       	cpi	r25, 0x90	; 144
 2ec:	09 f0       	breq	.+2      	; 0x2f0 <__vector_11+0xa8>
 2ee:	a0 c0       	rjmp	.+320    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 2f0:	8f 70       	andi	r24, 0x0F	; 15
				
				if (((midi_buff[0]&0x0F) != midi_channel)&&(midi_learn_current==0))
 2f2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <midi_channel>
 2f6:	89 17       	cp	r24, r25
 2f8:	09 f4       	brne	.+2      	; 0x2fc <__vector_11+0xb4>
 2fa:	77 c0       	rjmp	.+238    	; 0x3ea <__vector_11+0x1a2>
 2fc:	e1 11       	cpse	r30, r1
 2fe:	28 c0       	rjmp	.+80     	; 0x350 <__vector_11+0x108>
					midi_channel = (midi_buff[0]&0x0F); //IF CHANNEL 1 SELECTED ENABLE MIDI CHANNEL OVERRIDE
 300:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <midi_channel>
				
				if (((midi_buff[0]&0x0F) == midi_channel) && (midi_buff[2] != 0)){
 304:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <midi_buff+0x2>
 308:	88 23       	and	r24, r24
 30a:	09 f4       	brne	.+2      	; 0x30e <__vector_11+0xc6>
 30c:	91 c0       	rjmp	.+290    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 30e:	89 c0       	rjmp	.+274    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
					//ACTUALLY LEARN MAP FOR SELECTED CHANNEL HERE:
					midi_note_map[midi_learn_current] = midi_buff[1];
 310:	ae 2f       	mov	r26, r30
 312:	b0 e0       	ldi	r27, 0x00	; 0
 314:	a6 59       	subi	r26, 0x96	; 150
 316:	bf 4f       	sbci	r27, 0xFF	; 255
 318:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <midi_buff+0x1>
 31c:	8c 93       	st	X, r24
		
					
					//SET GATE ON CHANNEL TO SHOW STATUS
					if(midi_learn_current == 0)
 31e:	e1 11       	cpse	r30, r1
 320:	02 c0       	rjmp	.+4      	; 0x326 <__vector_11+0xde>
						PORTB &= 0xFE;//inverted cos of 74HC1G14 inverter 
 322:	c0 98       	cbi	0x18, 0	; 24
 324:	0b c0       	rjmp	.+22     	; 0x33c <__vector_11+0xf4>
					else
						PORTD &= 0xFF^(1 << midi_learn_current);//inverted cos of 74HC1G14 inverter 
 326:	22 b3       	in	r18, 0x12	; 18
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 c0       	rjmp	.+4      	; 0x332 <__vector_11+0xea>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	ea 95       	dec	r30
 334:	e2 f7       	brpl	.-8      	; 0x32e <__vector_11+0xe6>
 336:	80 95       	com	r24
 338:	82 23       	and	r24, r18
 33a:	82 bb       	out	0x12, r24	; 18
		
					midi_learn_current++; //next channel	
 33c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <midi_learn_current>
 340:	8f 5f       	subi	r24, 0xFF	; 255
 342:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <midi_learn_current>
				}
				if(midi_learn_current>=8)
 346:	88 30       	cpi	r24, 0x08	; 8
 348:	18 f0       	brcs	.+6      	; 0x350 <__vector_11+0x108>
					midi_learn_mode=0;//DONE LEARNING! 
 34a:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <midi_learn_mode>
 34e:	52 c0       	rjmp	.+164    	; 0x3f4 <__vector_11+0x1ac>
			}
			
			
			//BUFFER TRANSLATE
			if (((midi_buff[0]&0x0F) == midi_channel) && !(midi_learn_mode))
 350:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <midi_buff>
 354:	28 2f       	mov	r18, r24
 356:	2f 70       	andi	r18, 0x0F	; 15
 358:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <midi_channel>
 35c:	29 13       	cpse	r18, r25
 35e:	68 c0       	rjmp	.+208    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 360:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <midi_learn_mode>
 364:	91 11       	cpse	r25, r1
 366:	64 c0       	rjmp	.+200    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
			{
				uint8_t i = 0;
				//GATE 1
				if(midi_buff[1]==midi_note_map[0]){
 368:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <midi_buff+0x1>
 36c:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <midi_note_map>
 370:	29 13       	cpse	r18, r25
 372:	49 c0       	rjmp	.+146    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
					if (((midi_buff[0]&MIDI_NOTE_ON)==MIDI_NOTE_ON) && (midi_buff[2] != 0)){//&&(midi_buff[2] != 0))
 374:	80 79       	andi	r24, 0x90	; 144
 376:	80 39       	cpi	r24, 0x90	; 144
 378:	41 f4       	brne	.+16     	; 0x38a <__vector_11+0x142>
 37a:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <midi_buff+0x2>
 37e:	66 23       	and	r22, r22
 380:	21 f0       	breq	.+8      	; 0x38a <__vector_11+0x142>
						//if(velocity_out && !(presets.velocity_mute && ((mute_state>>i)&1)))		//when velocity expander available
						set_velocity(0,midi_buff[2]);
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	55 df       	rcall	.-342    	; 0x230 <set_velocity>
						PORTB &= 0xFE;//inverted cos of 74HC1G14 inverter 
 386:	c0 98       	cbi	0x18, 0	; 24
 388:	3e c0       	rjmp	.+124    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
					}
					else
					PORTB |= 1; //
 38a:	c0 9a       	sbi	0x18, 0	; 24
 38c:	3c c0       	rjmp	.+120    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 38e:	8c 2f       	mov	r24, r28
				}
				//GATES 2-8 other Port
				for (i=1;i<8;i++){
					if(midi_buff[1]==midi_note_map[i]){
 390:	dc 2e       	mov	r13, r28
 392:	f8 01       	movw	r30, r16
 394:	91 91       	ld	r25, Z+
 396:	8f 01       	movw	r16, r30
 398:	f7 01       	movw	r30, r14
 39a:	21 81       	ldd	r18, Z+1	; 0x01
 39c:	29 13       	cpse	r18, r25
 39e:	20 c0       	rjmp	.+64     	; 0x3e0 <__vector_11+0x198>
						if (((midi_buff[0]&MIDI_NOTE_ON)==MIDI_NOTE_ON) && (midi_buff[2] != 0)){//&&(midi_buff[2] != 0))
 3a0:	90 81       	ld	r25, Z
 3a2:	90 79       	andi	r25, 0x90	; 144
 3a4:	90 39       	cpi	r25, 0x90	; 144
 3a6:	99 f4       	brne	.+38     	; 0x3ce <__vector_11+0x186>
 3a8:	62 81       	ldd	r22, Z+2	; 0x02
 3aa:	66 23       	and	r22, r22
 3ac:	81 f0       	breq	.+32     	; 0x3ce <__vector_11+0x186>
							if(velocity_out)
 3ae:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <velocity_out>
 3b2:	91 11       	cpse	r25, r1
							set_velocity(i,midi_buff[2]);
 3b4:	3d df       	rcall	.-390    	; 0x230 <set_velocity>
							PORTD &= 0xFF^(1 << i);//inverted cos of 74HC1G14 inverter 
 3b6:	92 b3       	in	r25, 0x12	; 18
 3b8:	95 01       	movw	r18, r10
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <__vector_11+0x178>
 3bc:	22 0f       	add	r18, r18
 3be:	33 1f       	adc	r19, r19
 3c0:	da 94       	dec	r13
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <__vector_11+0x174>
 3c4:	82 2f       	mov	r24, r18
 3c6:	80 95       	com	r24
 3c8:	89 23       	and	r24, r25
 3ca:	82 bb       	out	0x12, r24	; 18
 3cc:	09 c0       	rjmp	.+18     	; 0x3e0 <__vector_11+0x198>
						}else
						PORTD |= (1 << i);
 3ce:	22 b3       	in	r18, 0x12	; 18
 3d0:	c5 01       	movw	r24, r10
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <__vector_11+0x190>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	da 94       	dec	r13
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <__vector_11+0x18c>
 3dc:	82 2b       	or	r24, r18
 3de:	82 bb       	out	0x12, r24	; 18
 3e0:	21 96       	adiw	r28, 0x01	; 1
					}
					else
					PORTB |= 1; //
				}
				//GATES 2-8 other Port
				for (i=1;i<8;i++){
 3e2:	c8 30       	cpi	r28, 0x08	; 8
 3e4:	d1 05       	cpc	r29, r1
 3e6:	99 f6       	brne	.-90     	; 0x38e <__vector_11+0x146>
 3e8:	23 c0       	rjmp	.+70     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
			if ((midi_learn_mode) && (midi_learn_current<8) && ((midi_buff[0]&0xF0)==MIDI_NOTE_ON)){//learn map from pressed button and midi RX		
				
				if (((midi_buff[0]&0x0F) != midi_channel)&&(midi_learn_current==0))
					midi_channel = (midi_buff[0]&0x0F); //IF CHANNEL 1 SELECTED ENABLE MIDI CHANNEL OVERRIDE
				
				if (((midi_buff[0]&0x0F) == midi_channel) && (midi_buff[2] != 0)){
 3ea:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <midi_buff+0x2>
 3ee:	81 11       	cpse	r24, r1
 3f0:	8f cf       	rjmp	.-226    	; 0x310 <__vector_11+0xc8>
 3f2:	1e c0       	rjmp	.+60     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
					midi_learn_mode=0;//DONE LEARNING! 
			}
			
			
			//BUFFER TRANSLATE
			if (((midi_buff[0]&0x0F) == midi_channel) && !(midi_learn_mode))
 3f4:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <midi_buff>
 3f8:	28 2f       	mov	r18, r24
 3fa:	2f 70       	andi	r18, 0x0F	; 15
 3fc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <midi_channel>
 400:	29 13       	cpse	r18, r25
 402:	16 c0       	rjmp	.+44     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 404:	b1 cf       	rjmp	.-158    	; 0x368 <__vector_11+0x120>
 406:	0b e6       	ldi	r16, 0x6B	; 107
 408:	10 e0       	ldi	r17, 0x00	; 0
}


/* MIDI RECEIVER */
ISR(USART_RXC_vect)
{
 40a:	c1 e0       	ldi	r28, 0x01	; 1
 40c:	d0 e0       	ldi	r29, 0x00	; 0
					else
					PORTB |= 1; //
				}
				//GATES 2-8 other Port
				for (i=1;i<8;i++){
					if(midi_buff[1]==midi_note_map[i]){
 40e:	0f 2e       	mov	r0, r31
 410:	fc e7       	ldi	r31, 0x7C	; 124
 412:	ef 2e       	mov	r14, r31
 414:	f1 e0       	ldi	r31, 0x01	; 1
 416:	ff 2e       	mov	r15, r31
 418:	f0 2d       	mov	r31, r0
						if (((midi_buff[0]&MIDI_NOTE_ON)==MIDI_NOTE_ON) && (midi_buff[2] != 0)){//&&(midi_buff[2] != 0))
							if(velocity_out)
							set_velocity(i,midi_buff[2]);
							PORTD &= 0xFF^(1 << i);//inverted cos of 74HC1G14 inverter 
						}else
						PORTD |= (1 << i);
 41a:	aa 24       	eor	r10, r10
 41c:	a3 94       	inc	r10
 41e:	b1 2c       	mov	r11, r1
 420:	b6 cf       	rjmp	.-148    	; 0x38e <__vector_11+0x146>
				if (((midi_buff[0]&0x0F) != midi_channel)&&(midi_learn_current==0))
					midi_channel = (midi_buff[0]&0x0F); //IF CHANNEL 1 SELECTED ENABLE MIDI CHANNEL OVERRIDE
				
				if (((midi_buff[0]&0x0F) == midi_channel) && (midi_buff[2] != 0)){
					//ACTUALLY LEARN MAP FOR SELECTED CHANNEL HERE:
					midi_note_map[midi_learn_current] = midi_buff[1];
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	e6 59       	subi	r30, 0x96	; 150
 426:	ff 4f       	sbci	r31, 0xFF	; 255
 428:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <midi_buff+0x1>
 42c:	80 83       	st	Z, r24
 42e:	79 cf       	rjmp	.-270    	; 0x322 <__vector_11+0xda>
				}
			}
			
		}
	}
} //end ISR
 430:	ff 91       	pop	r31
 432:	ef 91       	pop	r30
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	bf 91       	pop	r27
 43a:	af 91       	pop	r26
 43c:	9f 91       	pop	r25
 43e:	8f 91       	pop	r24
 440:	7f 91       	pop	r23
 442:	6f 91       	pop	r22
 444:	5f 91       	pop	r21
 446:	4f 91       	pop	r20
 448:	3f 91       	pop	r19
 44a:	2f 91       	pop	r18
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	ff 90       	pop	r15
 452:	ef 90       	pop	r14
 454:	df 90       	pop	r13
 456:	bf 90       	pop	r11
 458:	af 90       	pop	r10
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <set_LED>:



void set_LED(uint8_t var){
	
	if (var==ENABLE)
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	11 f4       	brne	.+4      	; 0x46c <set_LED+0x8>
		DDRC |= (1<<LED_pin);
 468:	a0 9a       	sbi	0x14, 0	; 20
 46a:	08 95       	ret
	else	
		DDRC &= 0xFF^(1 << LED_pin);
 46c:	a0 98       	cbi	0x14, 0	; 20
 46e:	08 95       	ret

00000470 <midi_learn>:

/* MIDI LEARN AT STARTUP */

void midi_learn(void)
{	
	midi_learn_mode = 1; //set global flag for MIDI RX ISR
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <midi_learn_mode>
	midi_learn_current = 0;
 476:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <midi_learn_current>
	//ALL OFF
	PORTB |= 1; //
 47a:	c0 9a       	sbi	0x18, 0	; 24
	PORTD |= 0xFE;
 47c:	82 b3       	in	r24, 0x12	; 18
 47e:	8e 6f       	ori	r24, 0xFE	; 254
 480:	82 bb       	out	0x12, r24	; 18


	while(midi_learn_current<8){
 482:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <midi_learn_current>
 486:	88 30       	cpi	r24, 0x08	; 8
 488:	38 f4       	brcc	.+14     	; 0x498 <midi_learn+0x28>
		set_LED(ENABLE);
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	eb df       	rcall	.-42     	; 0x464 <set_LED>
		asm volatile ("nop");	//WAIT FOR ALL CHANNELS TO BE RECORDED
 48e:	00 00       	nop
	//ALL OFF
	PORTB |= 1; //
	PORTD |= 0xFE;


	while(midi_learn_current<8){
 490:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <midi_learn_current>
 494:	88 30       	cpi	r24, 0x08	; 8
 496:	c8 f3       	brcs	.-14     	; 0x48a <midi_learn+0x1a>
		set_LED(ENABLE);
		asm volatile ("nop");	//WAIT FOR ALL CHANNELS TO BE RECORDED
	} //STAY HERE LOOP END
	set_LED(DISABLE);
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	e4 df       	rcall	.-56     	; 0x464 <set_LED>


	//SAVE TO EEPROM 
	do {} while (!eeprom_is_ready());
 49c:	e1 99       	sbic	0x1c, 1	; 28
 49e:	fe cf       	rjmp	.-4      	; 0x49c <midi_learn+0x2c>
	//save Channel
	//midi_channel = eeprom_read_byte(EEPROM_CHANNEL_ADDR);
	eeprom_write_byte(EEPROM_CHANNEL_ADDR,midi_channel);
 4a0:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <midi_channel>
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	18 d1       	rcall	.+560    	; 0x6da <eeprom_write_byte>
	
	do {} while (!eeprom_is_ready());
 4aa:	e1 99       	sbic	0x1c, 1	; 28
 4ac:	fe cf       	rjmp	.-4      	; 0x4aa <midi_learn+0x3a>
	//load map
	//	eeprom_read_block(&midi_note_map,EEPROM_MAP_ADDR,8);
	eeprom_write_block(&midi_note_map,EEPROM_MAP_ADDR,8);
 4ae:	48 e0       	ldi	r20, 0x08	; 8
 4b0:	50 e0       	ldi	r21, 0x00	; 0
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	71 e0       	ldi	r23, 0x01	; 1
 4b6:	8a e6       	ldi	r24, 0x6A	; 106
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	06 d1       	rcall	.+524    	; 0x6c8 <eeprom_write_block>

	//ALL OFF
	PORTB |= 1; //
 4bc:	c0 9a       	sbi	0x18, 0	; 24
	PORTD |= 0xFE;
 4be:	82 b3       	in	r24, 0x12	; 18
 4c0:	8e 6f       	ori	r24, 0xFE	; 254
 4c2:	82 bb       	out	0x12, r24	; 18

	//end midi learn mode in MIDI RX ISR

	set_LED(DISABLE);
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	ce df       	rcall	.-100    	; 0x464 <set_LED>
 4c8:	08 95       	ret

000004ca <main>:
int main(void)
{

/* GPIO INIT */
	//DDRA = 0xFF; //ROW&COLUMN FOR LED/BUTTON	
	DDRC = 0x0C | (1 << LED_pin) | (1 << BUTTON_PIN); //LDAC & CLEAR & LED
 4ca:	8f e0       	ldi	r24, 0x0F	; 15
 4cc:	84 bb       	out	0x14, r24	; 20
	DDRB = 0x01; // Trigger Out 0	
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFE; //Trigger outs 1-7
 4d2:	8e ef       	ldi	r24, 0xFE	; 254
 4d4:	81 bb       	out	0x11, r24	; 17
	//DDRE = 0xFC; //ENABLE outs 7-2
	//DDRG = 0x03; //ENABLE outs 1,0
    //DDRF = 0x0C; // 0,1 Button Ins 2,3 Clock outs 
   
	//PORTC |= (1 << BUTTON_PIN);
    PORTD |= 0xFE; //ALL GATES LOW (Inverter Out)
 4d6:	82 b3       	in	r24, 0x12	; 18
 4d8:	8e 6f       	ori	r24, 0xFE	; 254
 4da:	82 bb       	out	0x12, r24	; 18
    PORTB |= 0x01; // 
 4dc:	c0 9a       	sbi	0x18, 0	; 24
	
	set_LED(ENABLE);
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	c1 df       	rcall	.-126    	; 0x464 <set_LED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e2:	2f ef       	ldi	r18, 0xFF	; 255
 4e4:	85 ea       	ldi	r24, 0xA5	; 165
 4e6:	9e e0       	ldi	r25, 0x0E	; 14
 4e8:	21 50       	subi	r18, 0x01	; 1
 4ea:	80 40       	sbci	r24, 0x00	; 0
 4ec:	90 40       	sbci	r25, 0x00	; 0
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <main+0x1e>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <main+0x28>
 4f2:	00 00       	nop
	_delay_ms(300);
	set_LED(DISABLE);
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	b6 df       	rcall	.-148    	; 0x464 <set_LED>
	//buttons = { {BUTTON_UP,BUTTON_UP,BUTTON_UP,BUTTON_UP,BUTTON_UP,BUTTON_UP,BUTTON_UP,BUTTON_UP},BUTTON_UP,BUTTON_UP };	
				
	/* Blink Timer Init */
//	TCCR1B = 0b010; //FREE RUNNING, PORT disconnected, /64
	/* Button Poll Timer */
	TCCR2 = (1 << WGM20)|(0 << WGM21)|(0b111<<CS20);//CTC, PORT disconnected, /1024
 4f8:	87 e4       	ldi	r24, 0x47	; 71
 4fa:	85 bd       	out	0x25, r24	; 37
	OCR2 = 157;//ca. 10ms@16MHz
 4fc:	8d e9       	ldi	r24, 0x9D	; 157
 4fe:	83 bd       	out	0x23, r24	; 35
	
	/* MIDI INIT */
	UCSRB = (1<<RXCIE)|(1<<RXEN);
 500:	80 e9       	ldi	r24, 0x90	; 144
 502:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UCSZ0)|(1<<UCSZ1);
 504:	86 e0       	ldi	r24, 0x06	; 6
 506:	80 bd       	out	0x20, r24	; 32
	UBRRH = (unsigned char)(MYUBRR>>8);
 508:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) MYUBRR;
 50a:	8f e1       	ldi	r24, 0x1F	; 31
 50c:	89 b9       	out	0x09, r24	; 9
	
/* LOAD MIDI MAP FROM EEPROM*/
	do {} while (!eeprom_is_ready());
 50e:	e1 99       	sbic	0x1c, 1	; 28
 510:	fe cf       	rjmp	.-4      	; 0x50e <main+0x44>
	//load Channel 
	midi_channel = eeprom_read_byte(EEPROM_CHANNEL_ADDR);
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	d0 d0       	rcall	.+416    	; 0x6b8 <eeprom_read_byte>
 518:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <midi_channel>
	do {} while (!eeprom_is_ready());
 51c:	e1 99       	sbic	0x1c, 1	; 28
 51e:	fe cf       	rjmp	.-4      	; 0x51c <main+0x52>
	//load map
	eeprom_read_block(&midi_note_map,EEPROM_MAP_ADDR,8);	
 520:	48 e0       	ldi	r20, 0x08	; 8
 522:	50 e0       	ldi	r21, 0x00	; 0
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	71 e0       	ldi	r23, 0x01	; 1
 528:	8a e6       	ldi	r24, 0x6A	; 106
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	b5 d0       	rcall	.+362    	; 0x698 <eeprom_read_block>
	do {} while (!eeprom_is_ready());
 52e:	e1 99       	sbic	0x1c, 1	; 28
 530:	fe cf       	rjmp	.-4      	; 0x52e <main+0x64>
	//set map to default if never learned:
	if (midi_note_map[0]==0xFF)
 532:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <midi_note_map>
 536:	8f 3f       	cpi	r24, 0xFF	; 255
 538:	09 f4       	brne	.+2      	; 0x53c <main+0x72>
		set_default();
 53a:	5e de       	rcall	.-836    	; 0x1f8 <set_default>

	
/* CHECK FOR EXPANDERS */
	//uint8_t i2cread[5] = {NULL};
	//TWI_READ_BULK(0x20,0x00,2,&i2cread);
	PORTC = (1 << PC2)|(1 << PC3);	
 53c:	8c e0       	ldi	r24, 0x0C	; 12
 53e:	85 bb       	out	0x15, r24	; 21
	DDRC  |= (1 << PC2)|(1 << PC3);
 540:	84 b3       	in	r24, 0x14	; 20
 542:	8c 60       	ori	r24, 0x0C	; 12
 544:	84 bb       	out	0x14, r24	; 20
	
	velocity_out = test_max5825();	//Velocity Out Expander present? (a.k.a. WK4) 
 546:	7f d0       	rcall	.+254    	; 0x646 <test_max5825>
 548:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <velocity_out>
//	if(velocity_out){
		init_max5825();
 54c:	62 d0       	rcall	.+196    	; 0x612 <init_max5825>
		init_max5825();		
 54e:	61 d0       	rcall	.+194    	; 0x612 <init_max5825>
//		max5825_set_load_channel(0,0xFfff);
//	}

	midi_learn_mode = 0;
 550:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <midi_learn_mode>
/* INTERRUPTS ENABLE */
	sei();
 554:	78 94       	sei
		learn_button == BUTTON_UP;
	//	set_LED(DISABLE);
	}

	if (learn_button == BUTTON_PRESSED){
		learn_button = BUTTON_DOWN;
 556:	c2 e0       	ldi	r28, 0x02	; 2
		//set_LED(ENABLE);		
		if(setting_wait_flag == 0){	//START THE WAIT
			setting_wait_counter = 0;
			setting_wait_flag = 1;
 558:	d1 e0       	ldi	r29, 0x01	; 1
					
					if(button_now == 0){
						learn_button = BUTTON_RELEASED;
						//set_LED(DISABLE);
					}else{
						learn_button = BUTTON_PRESSED;		
 55a:	03 e0       	ldi	r16, 0x03	; 3
			}else{			
										
				if (button_now != button_last){			
					
					if(button_now == 0){
						learn_button = BUTTON_RELEASED;
 55c:	14 e0       	ldi	r17, 0x04	; 4
	static uint8_t button_bounce = 0;
	static uint8_t button_last = 0;
	

	//CHECK FOR GOTO SETTINGS MENU - LEARN BUTTON HAS TO BE DOWN FOR 3 SEC 
	if ((learn_button == BUTTON_RELEASED)){
 55e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 562:	84 30       	cpi	r24, 0x04	; 4
 564:	39 f4       	brne	.+14     	; 0x574 <main+0xaa>
		setting_wait_counter = 0;
 566:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <setting_wait_counter+0x1>
 56a:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <setting_wait_counter>
		setting_wait_flag = 0;
 56e:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <setting_wait_flag>
 572:	23 c0       	rjmp	.+70     	; 0x5ba <main+0xf0>
		learn_button == BUTTON_UP;
	//	set_LED(DISABLE);
	}

	if (learn_button == BUTTON_PRESSED){
 574:	83 30       	cpi	r24, 0x03	; 3
 576:	69 f4       	brne	.+26     	; 0x592 <main+0xc8>
		learn_button = BUTTON_DOWN;
 578:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__data_start>
		//set_LED(ENABLE);		
		if(setting_wait_flag == 0){	//START THE WAIT
 57c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <setting_wait_flag>
 580:	81 11       	cpse	r24, r1
 582:	09 c0       	rjmp	.+18     	; 0x596 <main+0xcc>
			setting_wait_counter = 0;
 584:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <setting_wait_counter+0x1>
 588:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <setting_wait_counter>
			setting_wait_flag = 1;
 58c:	d0 93 74 01 	sts	0x0174, r29	; 0x800174 <setting_wait_flag>
 590:	06 c0       	rjmp	.+12     	; 0x59e <main+0xd4>
			//LEDs.groupLED = LED_BLINK2;

		}
	}
		
	if(learn_button == BUTTON_DOWN){
 592:	82 30       	cpi	r24, 0x02	; 2
 594:	91 f4       	brne	.+36     	; 0x5ba <main+0xf0>
		if(setting_wait_flag == 1){
 596:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <setting_wait_flag>
 59a:	81 30       	cpi	r24, 0x01	; 1
 59c:	71 f4       	brne	.+28     	; 0x5ba <main+0xf0>
			if (setting_wait_counter >=200){
 59e:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <setting_wait_counter>
 5a2:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <setting_wait_counter+0x1>
 5a6:	88 3c       	cpi	r24, 0xC8	; 200
 5a8:	91 05       	cpc	r25, r1
 5aa:	38 f0       	brcs	.+14     	; 0x5ba <main+0xf0>
			//	set_LED(ENABLE);
				midi_learn();
 5ac:	61 df       	rcall	.-318    	; 0x470 <midi_learn>
				setting_wait_counter = 0;
 5ae:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <setting_wait_counter+0x1>
 5b2:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <setting_wait_counter>
				setting_wait_flag = 0;
 5b6:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <setting_wait_flag>
	

	/************************************************************************/
	/*                    keyscan                                           */
	/************************************************************************/
		if ((TIFR>>OCF2)&1)
 5ba:	08 b6       	in	r0, 0x38	; 56
 5bc:	07 fe       	sbrs	r0, 7
 5be:	cf cf       	rjmp	.-98     	; 0x55e <main+0x94>
		{
			//keyscan(&buttons);
			TCNT2 = 0; //reset timer
 5c0:	14 bc       	out	0x24, r1	; 36
			TIFR |= (1 << OCF2); //reset flag		
 5c2:	88 b7       	in	r24, 0x38	; 56
 5c4:	80 68       	ori	r24, 0x80	; 128
 5c6:	88 bf       	out	0x38, r24	; 56
			
			button_now = PINC & (1 << BUTTON_PIN);
 5c8:	83 b3       	in	r24, 0x13	; 19
 5ca:	82 70       	andi	r24, 0x02	; 2
			
			if (button_now != button_bounce){
 5cc:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <button_bounce.2173>
 5d0:	89 17       	cp	r24, r25
 5d2:	19 f0       	breq	.+6      	; 0x5da <main+0x110>
				button_bounce = button_now;			
 5d4:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <button_bounce.2173>
 5d8:	0d c0       	rjmp	.+26     	; 0x5f4 <main+0x12a>
			}else{			
										
				if (button_now != button_last){			
 5da:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <__data_end>
 5de:	89 17       	cp	r24, r25
 5e0:	49 f0       	breq	.+18     	; 0x5f4 <main+0x12a>
					
					if(button_now == 0){
 5e2:	81 11       	cpse	r24, r1
 5e4:	03 c0       	rjmp	.+6      	; 0x5ec <main+0x122>
						learn_button = BUTTON_RELEASED;
 5e6:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__data_start>
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <main+0x126>
						//set_LED(DISABLE);
					}else{
						learn_button = BUTTON_PRESSED;		
 5ec:	00 93 60 00 	sts	0x0060, r16	; 0x800060 <__data_start>
					//	set_LED(ENABLE);
					}
						
					button_last = button_now;		
 5f0:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
				}			
			}

			if(setting_wait_flag == 1)
 5f4:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <setting_wait_flag>
 5f8:	81 30       	cpi	r24, 0x01	; 1
 5fa:	09 f0       	breq	.+2      	; 0x5fe <main+0x134>
 5fc:	b0 cf       	rjmp	.-160    	; 0x55e <main+0x94>
				setting_wait_counter++; 
 5fe:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <setting_wait_counter>
 602:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <setting_wait_counter+0x1>
 606:	01 96       	adiw	r24, 0x01	; 1
 608:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <setting_wait_counter+0x1>
 60c:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <setting_wait_counter>
 610:	a6 cf       	rjmp	.-180    	; 0x55e <main+0x94>

00000612 <init_max5825>:

#include <avr/io.h>
#include "MAX5825.h"
#include "general_twi.h"

void init_max5825(void){
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	00 d0       	rcall	.+0      	; 0x618 <init_max5825+0x6>
 618:	cd b7       	in	r28, 0x3d	; 61
 61a:	de b7       	in	r29, 0x3e	; 62
		
	

	uint8_t data[2] = {NULL};
 61c:	1a 82       	std	Y+2, r1	; 0x02
 61e:	19 82       	std	Y+1, r1	; 0x01
	TWI_WRITE_BULK(MAX5825_ADDR,(MAX5825_REG_REF | 0b101),2,&data); //INT REF = 2.5V ALL DAC PWR ON 	
 620:	9e 01       	movw	r18, r28
 622:	2f 5f       	subi	r18, 0xFF	; 255
 624:	3f 4f       	sbci	r19, 0xFF	; 255
 626:	42 e0       	ldi	r20, 0x02	; 2
 628:	65 e2       	ldi	r22, 0x25	; 37
 62a:	80 e2       	ldi	r24, 0x20	; 32
 62c:	97 dd       	rcall	.-1234   	; 0x15c <TWI_WRITE_BULK>
		
	TWI_WRITE_BULK(MAX5825_ADDR,MAX5825_REG_CODELOADALL,2,&data); // all to zero 
 62e:	9e 01       	movw	r18, r28
 630:	2f 5f       	subi	r18, 0xFF	; 255
 632:	3f 4f       	sbci	r19, 0xFF	; 255
 634:	42 e0       	ldi	r20, 0x02	; 2
 636:	62 ec       	ldi	r22, 0xC2	; 194
 638:	80 e2       	ldi	r24, 0x20	; 32
 63a:	90 dd       	rcall	.-1248   	; 0x15c <TWI_WRITE_BULK>
		
	
	return;
}
 63c:	0f 90       	pop	r0
 63e:	0f 90       	pop	r0
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	08 95       	ret

00000646 <test_max5825>:

uint8_t test_max5825(void){
 646:	cf 93       	push	r28
 648:	df 93       	push	r29
 64a:	00 d0       	rcall	.+0      	; 0x64c <test_max5825+0x6>
 64c:	cd b7       	in	r28, 0x3d	; 61
 64e:	de b7       	in	r29, 0x3e	; 62
	uint8_t retval = 0;
	uint8_t buffer[2] = {NULL};
 650:	1a 82       	std	Y+2, r1	; 0x02
 652:	19 82       	std	Y+1, r1	; 0x01
	
	retval = TWI_READ_BULK(MAX5825_ADDR,0,2,&buffer);
 654:	9e 01       	movw	r18, r28
 656:	2f 5f       	subi	r18, 0xFF	; 255
 658:	3f 4f       	sbci	r19, 0xFF	; 255
 65a:	42 e0       	ldi	r20, 0x02	; 2
 65c:	60 e0       	ldi	r22, 0x00	; 0
 65e:	80 e2       	ldi	r24, 0x20	; 32
 660:	fe dc       	rcall	.-1540   	; 0x5e <TWI_READ_BULK>
	
	return retval;
}
 662:	0f 90       	pop	r0
 664:	0f 90       	pop	r0
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	08 95       	ret

0000066c <max5825_set_load_channel>:


void max5825_set_load_channel(uint8_t ch, uint16_t value){
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
 670:	00 d0       	rcall	.+0      	; 0x672 <max5825_set_load_channel+0x6>
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t cmd_addr = (MAX5825_REG_CODEn_LOADn | (ch & 0x0F));
	uint8_t data[2];
	
	data[0]= (uint8_t) ((value>>8) & 0xFF);
 676:	79 83       	std	Y+1, r23	; 0x01
	data[1]= (uint8_t) (value & 0x00F0);
 678:	60 7f       	andi	r22, 0xF0	; 240
 67a:	6a 83       	std	Y+2, r22	; 0x02

	TWI_WRITE_BULK(MAX5825_ADDR,cmd_addr,2,&data);
 67c:	8f 70       	andi	r24, 0x0F	; 15
 67e:	68 2f       	mov	r22, r24
 680:	60 6b       	ori	r22, 0xB0	; 176
 682:	9e 01       	movw	r18, r28
 684:	2f 5f       	subi	r18, 0xFF	; 255
 686:	3f 4f       	sbci	r19, 0xFF	; 255
 688:	42 e0       	ldi	r20, 0x02	; 2
 68a:	80 e2       	ldi	r24, 0x20	; 32
 68c:	67 dd       	rcall	.-1330   	; 0x15c <TWI_WRITE_BULK>
	
	return;
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	08 95       	ret

00000698 <eeprom_read_block>:
 698:	dc 01       	movw	r26, r24
 69a:	cb 01       	movw	r24, r22

0000069c <eeprom_read_blraw>:
 69c:	fc 01       	movw	r30, r24
 69e:	e1 99       	sbic	0x1c, 1	; 28
 6a0:	fe cf       	rjmp	.-4      	; 0x69e <eeprom_read_blraw+0x2>
 6a2:	06 c0       	rjmp	.+12     	; 0x6b0 <eeprom_read_blraw+0x14>
 6a4:	ff bb       	out	0x1f, r31	; 31
 6a6:	ee bb       	out	0x1e, r30	; 30
 6a8:	e0 9a       	sbi	0x1c, 0	; 28
 6aa:	31 96       	adiw	r30, 0x01	; 1
 6ac:	0d b2       	in	r0, 0x1d	; 29
 6ae:	0d 92       	st	X+, r0
 6b0:	41 50       	subi	r20, 0x01	; 1
 6b2:	50 40       	sbci	r21, 0x00	; 0
 6b4:	b8 f7       	brcc	.-18     	; 0x6a4 <eeprom_read_blraw+0x8>
 6b6:	08 95       	ret

000006b8 <eeprom_read_byte>:
 6b8:	e1 99       	sbic	0x1c, 1	; 28
 6ba:	fe cf       	rjmp	.-4      	; 0x6b8 <eeprom_read_byte>
 6bc:	9f bb       	out	0x1f, r25	; 31
 6be:	8e bb       	out	0x1e, r24	; 30
 6c0:	e0 9a       	sbi	0x1c, 0	; 28
 6c2:	99 27       	eor	r25, r25
 6c4:	8d b3       	in	r24, 0x1d	; 29
 6c6:	08 95       	ret

000006c8 <eeprom_write_block>:
 6c8:	dc 01       	movw	r26, r24
 6ca:	cb 01       	movw	r24, r22
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <eeprom_write_block+0xa>
 6ce:	2d 91       	ld	r18, X+
 6d0:	05 d0       	rcall	.+10     	; 0x6dc <eeprom_write_r18>
 6d2:	41 50       	subi	r20, 0x01	; 1
 6d4:	50 40       	sbci	r21, 0x00	; 0
 6d6:	d8 f7       	brcc	.-10     	; 0x6ce <eeprom_write_block+0x6>
 6d8:	08 95       	ret

000006da <eeprom_write_byte>:
 6da:	26 2f       	mov	r18, r22

000006dc <eeprom_write_r18>:
 6dc:	e1 99       	sbic	0x1c, 1	; 28
 6de:	fe cf       	rjmp	.-4      	; 0x6dc <eeprom_write_r18>
 6e0:	9f bb       	out	0x1f, r25	; 31
 6e2:	8e bb       	out	0x1e, r24	; 30
 6e4:	2d bb       	out	0x1d, r18	; 29
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	f8 94       	cli
 6ea:	e2 9a       	sbi	0x1c, 2	; 28
 6ec:	e1 9a       	sbi	0x1c, 1	; 28
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	01 96       	adiw	r24, 0x01	; 1
 6f2:	08 95       	ret

000006f4 <_exit>:
 6f4:	f8 94       	cli

000006f6 <__stop_program>:
 6f6:	ff cf       	rjmp	.-2      	; 0x6f6 <__stop_program>
